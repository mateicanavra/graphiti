version: "3.8"
x-healthcheck: &healthcheck
  test: ["CMD-SHELL", "curl -s -I --max-time 1 http://localhost:8000/sse | grep -q 'text/event-stream' || exit 1"]
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 5s
x-model-version: &model-version
  MODEL_NAME: "o3-mini"
x-common-env: &common-env
  NEO4J_URI: "bolt://neo4j:7687"
  NEO4J_USER: "neo4j"
  NEO4J_PASSWORD: "demodemo"
  OPENAI_API_KEY: ${OPENAI_API_KEY}
  PATH: "/root/.local/bin:${PATH}"

services:
  neo4j:
    image: neo4j:5.26.0
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt
    environment:
      - NEO4J_AUTH=neo4j/demodemo
      - NEO4J_server_memory_heap_initial__size=512m
      - NEO4J_server_memory_heap_max__size=1G
      - NEO4J_server_memory_pagecache_size=512m
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  graphiti-magic-api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - path: .env
        required: false # Makes the file optional. Default value is 'true'
    depends_on:
      neo4j:
        condition: service_healthy
    environment:
      <<: [*model-version, *common-env]
    healthcheck:
      <<: *healthcheck
    ports:
      - "8000:8000" # Expose the MCP server via HTTP for SSE transport
    command: [
      "uv", "run",
      "graphiti_mcp_server.py",
      "--transport", "sse",
      "--group-id", "magic-api",
      "--use-custom-entities",
      "--entity-type-dir", "mcp_server/entity_types/base"
    ]
  graphiti-civ7:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - path: .env
        required: false # Makes the file optional. Default value is 'true'
    depends_on:
      graphiti-magic-api:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    environment:
      <<: [*model-version, *common-env]
    healthcheck:
      <<: *healthcheck
    ports:
      - "8001:8000" # Expose the MCP server via HTTP for SSE transport
    command: [
      "uv", "run",
      "graphiti_mcp_server.py",
      "--transport", "sse",
      "--group-id", "civ7",
      "--use-custom-entities",
      "--entity-type-dir", "mcp_server/entity_types/example"
    ]
  graphiti-mcp-filesystem:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - path: .env
        required: false # Makes the file optional. Default value is 'true'
    depends_on:
      graphiti-magic-api:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    environment:
      <<: [*model-version, *common-env]
    healthcheck:
      <<: *healthcheck
    ports:
      - "8002:8000" # Expose the MCP server via HTTP for SSE transport
    command: [
      "uv", "run",
      "graphiti_mcp_server.py",
      "--transport", "sse",
      "--group-id", "filesystem",
      "--use-custom-entities",
      "--entity-types", "Requirement", "Preference"
    ]
  graphiti-mcp-source:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - path: .env
        required: false # Makes the file optional. Default value is 'true'
    depends_on:
      graphiti-magic-api:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    environment:
      <<: [*model-version, *common-env]
    healthcheck:
      <<: *healthcheck
    ports:
      - "8003:8000" # Expose the MCP server via HTTP for SSE transport
    command: [
      "uv", "run",
      "graphiti_mcp_server.py",
      "--transport", "sse",
      "--group-id", "graphiti-source",
      "--use-custom-entities",
      "--entity-type-dir", "mcp_server/entity_types/graphiti"
    ]

volumes:
  neo4j_data:
  neo4j_logs:
