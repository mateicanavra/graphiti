#!/bin/bash
set -e # Exit immediately if a command exits with a non-zero status.

# Define color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Function to display usage information
usage() {
  echo -e "${BOLD}Usage:${NC} graphiti [-h|--help] [COMMAND] [ARGS...]"
  echo
  echo -e "${BOLD}Commands:${NC}"
  echo -e "  ${CYAN}init${NC} PROJECT_NAME [DIR]        Initialize a project: create config and entities directory, and set up rules."
  echo -e "  ${CYAN}entity${NC} SET_NAME                Create a new entity type set with an example entity in the mcp-graphiti repo."
  echo -e "  ${CYAN}rules${NC} PROJECT_NAME [DIR]       Setup Cursor rules (.mdc files) for Graphiti in a target project directory."
  echo -e "  ${CYAN}up${NC} [-d] [--log-level LEVEL]    Start all containers using docker compose. Use -d for detached mode."
  echo -e "  ${CYAN}down${NC} [--log-level LEVEL]       Stop and remove all containers using docker compose."
  echo -e "  ${CYAN}restart${NC} [--log-level LEVEL]    Restart all containers: runs 'down' followed by 'up'."
  echo -e "  ${CYAN}compose${NC}                        Generate docker-compose.yml file from base-compose.yaml and mcp-projects.yaml."
  echo
  echo -e "${BOLD}Arguments for init & rules:${NC}"
  echo -e "  ${BOLD}PROJECT_NAME${NC}  Name of the target project (used for schema filename)."
  echo -e "  ${BOLD}DIR${NC}           Optional. Target project root directory. Defaults to current directory (.)."
  echo
  echo -e "${BOLD}Options:${NC}"
  echo -e "  ${BOLD}-h, --help${NC}                Show this help message and exit."
  echo -e "  ${BOLD}-d${NC}                        Run containers in detached mode (background) with 'up' command."
  echo -e "  ${BOLD}--log-level LEVEL${NC}         Set logging level (with up/down/restart). Valid values: debug, info, warn, error, fatal."
  echo -e "                                  Default: info"
  echo
  echo -e "${BOLD}Prerequisites:${NC}"
  echo -e "  The ${CYAN}MCP_GRAPHITI_REPO_PATH${NC} environment variable must be set to the"
  echo -e "  absolute path of your local mcp-graphiti repository."
  echo -e "  Example: ${YELLOW}export MCP_GRAPHITI_REPO_PATH=/path/to/mcp-graphiti${NC}"
  exit 0
}

# Function to convert set name to a class name (e.g., my-cool-set to MyCoolSetEntity)
set_name_to_class_name() {
  local set_name="$1"
  local class_name=""
  
  # Split by hyphens and underscores, capitalize each part, and join
  IFS='-_' read -ra PARTS <<< "$set_name"
  for part in "${PARTS[@]}"; do
    # Capitalize first letter of each part
    class_name+="$(tr '[:lower:]' '[:upper:]' <<< "${part:0:1}")${part:1}"
  done
  
  # Add "Entity" suffix
  echo "${class_name}Entity"
}

# --- Helper Function for Setting Up Rules ---
_setup_rules() {
  local PROJECT_NAME="$1"
  local TARGET_DIR="${2:-.}" # Default target directory to current if not provided

  # Validate PROJECT_NAME format (optional, but good practice)
  if ! [[ "$PROJECT_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo -e "${RED}Error: Invalid PROJECT_NAME. Use only letters, numbers, underscores, and hyphens.${NC}"
    exit 1
  fi

  # Define paths
  local CURSOR_RULES_DIR="$TARGET_DIR/.cursor/rules/graphiti"
  local SOURCE_CORE_RULE="$SOURCE_SERVER_DIR/rules/graphiti-mcp-core-rules.md"
  local SOURCE_MAINT_RULE="$SOURCE_SERVER_DIR/rules/graphiti-knowledge-graph-maintenance.md"
  local TARGET_CORE_RULE_LINK="$CURSOR_RULES_DIR/graphiti-mcp-core-rules.mdc"
  local TARGET_MAINT_RULE_LINK="$CURSOR_RULES_DIR/graphiti-knowledge-graph-maintenance.mdc"
  local TARGET_SCHEMA_FILE="$CURSOR_RULES_DIR/graphiti-$PROJECT_NAME-schema.mdc"
  local SCHEMA_TEMPLATE_FILE="$SOURCE_SERVER_DIR/rules/templates/project_schema_template.md"

  echo -e "Setting up Graphiti Cursor rules for project '${CYAN}$PROJECT_NAME${NC}' in ${CYAN}$TARGET_DIR${NC}"

  # Create target directory
  mkdir -p "$CURSOR_RULES_DIR"
  echo -e "Created rules directory: ${CYAN}$CURSOR_RULES_DIR${NC}"

  # Check source files exist before linking/generating
  if [ ! -f "$SOURCE_CORE_RULE" ]; then
    echo -e "${RED}Error: Source rule file not found: $SOURCE_CORE_RULE${NC}"
    exit 1
  fi
  if [ ! -f "$SOURCE_MAINT_RULE" ]; then
    echo -e "${RED}Error: Source rule file not found: $SOURCE_MAINT_RULE${NC}"
    exit 1
  fi
  if [ ! -f "$SCHEMA_TEMPLATE_FILE" ]; then
    echo -e "${RED}Error: Schema template file not found: $SCHEMA_TEMPLATE_FILE${NC}"
    exit 1
  fi

  # Create symlinks
  echo -e "Linking core rule: ${CYAN}$TARGET_CORE_RULE_LINK${NC} -> ${CYAN}$SOURCE_CORE_RULE${NC}"
  ln -sf "$SOURCE_CORE_RULE" "$TARGET_CORE_RULE_LINK"

  echo -e "Linking maintenance rule: ${CYAN}$TARGET_MAINT_RULE_LINK${NC} -> ${CYAN}$SOURCE_MAINT_RULE${NC}"
  ln -sf "$SOURCE_MAINT_RULE" "$TARGET_MAINT_RULE_LINK"

  # Generate template project schema file from template (.md -> .mdc)
  if [ -e "$TARGET_SCHEMA_FILE" ]; then
    echo -e "${YELLOW}Warning: Project schema file already exists, skipping template generation: $TARGET_SCHEMA_FILE${NC}"
  else
    echo -e "Generating template project schema file: ${CYAN}$TARGET_SCHEMA_FILE${NC}"
    sed "s/__PROJECT_NAME__/$PROJECT_NAME/g" "$SCHEMA_TEMPLATE_FILE" > "$TARGET_SCHEMA_FILE"
  fi

  echo -e "${GREEN}Graphiti Cursor rules setup complete for project '$PROJECT_NAME'.${NC}"
}

# --- Helper Function for Ensuring docker-compose.yml is Generated ---
_ensure_docker_compose_file() {
  local MCP_SERVER_DIR="$MCP_GRAPHITI_REPO_PATH/mcp_server"
  local DOCKER_COMPOSE_FILE="$MCP_SERVER_DIR/docker-compose.yml"
  
  echo -e "${BOLD}Ensuring docker-compose.yml is up-to-date...${NC}"
  
  # Check if we need to regenerate the file
  # Always regenerate for safety, but could add timestamp checks later if needed
  local CURRENT_DIR=$(pwd)
  
  # Change to mcp_server directory
  cd "$MCP_SERVER_DIR"
  
  # Run the generation script
  echo -e "Generating docker-compose.yml from templates..."
  "./generate_compose.py" > /dev/null 2>&1
  local RESULT=$?
  
  if [ $RESULT -ne 0 ]; then
    echo -e "${RED}Warning: Failed to generate docker-compose.yml file.${NC}"
    echo -e "${YELLOW}Continuing with existing file if it exists.${NC}"
  fi
  
  # Return to the original directory
  cd "$CURRENT_DIR"
  
  # Check if the file exists now
  if [ ! -f "$DOCKER_COMPOSE_FILE" ]; then
    echo -e "${RED}Error: docker-compose.yml file does not exist and could not be generated.${NC}"
    return 1
  fi
  
  return 0
}

# Function to find the repository path based on script location
detect_repo_path() {
  # Get the real path of the script (resolving any symlinks)
  local SCRIPT_PATH=""
  
  # First attempt - use readlink if available
  if command -v readlink >/dev/null 2>&1; then
    # Check if readlink -f is supported (Linux/BSD)
    if readlink -f / >/dev/null 2>&1; then
      SCRIPT_PATH=$(readlink -f "${BASH_SOURCE[0]}" 2>/dev/null || readlink -f "$0" 2>/dev/null)
    else
      # For macOS, which doesn't support readlink -f
      SCRIPT_PATH=$(perl -MCwd -e 'print Cwd::abs_path shift' "${BASH_SOURCE[0]}" 2>/dev/null || perl -MCwd -e 'print Cwd::abs_path shift' "$0" 2>/dev/null)
    fi
  fi
  
  # Fallback if readlink or perl failed
  if [ -z "$SCRIPT_PATH" ]; then
    SCRIPT_PATH="${BASH_SOURCE[0]:-$0}"
  fi
  
  echo "Debug: Script path resolved to: $SCRIPT_PATH" >&2
  
  # Get the script directory
  local SCRIPT_DIR="$(cd "$(dirname "$SCRIPT_PATH")" && pwd)"
  echo "Debug: Script directory: $SCRIPT_DIR" >&2
  
  # Check if we're in the expected directory structure
  # We know the script should be in mcp_server/scripts/
  # First possibility: script is executed from its original location
  if [[ "$SCRIPT_DIR" == */mcp_server/scripts ]]; then
    # Go up two levels to get the repo root
    local REPO_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
    echo "Debug: Detected repo root (direct): $REPO_ROOT" >&2
    
    if [ -d "$REPO_ROOT/mcp_server" ] && [ -d "$REPO_ROOT/mcp_server/entity_types" ]; then
      echo "$REPO_ROOT"
      return 0
    fi
  fi
  
  # Second possibility: we need to search for the repo structure
  # Try the current directory first
  local CURRENT_DIR="$(pwd)"
  echo "Debug: Checking current directory: $CURRENT_DIR" >&2
  
  if [ -d "$CURRENT_DIR/mcp_server" ] && [ -d "$CURRENT_DIR/mcp_server/entity_types" ]; then
    echo "Debug: Found repo structure in current directory" >&2
    echo "$CURRENT_DIR"
    return 0
  fi
  
  # Try one level up (in case we're in a subdirectory of the repo)
  local PARENT_DIR="$(cd .. && pwd)"
  echo "Debug: Checking parent directory: $PARENT_DIR" >&2
  
  if [ -d "$PARENT_DIR/mcp_server" ] && [ -d "$PARENT_DIR/mcp_server/entity_types" ]; then
    echo "Debug: Found repo structure in parent directory" >&2
    echo "$PARENT_DIR"
    return 0
  fi
  
  # If we got here, we couldn't find the repo root
  echo "Debug: Could not find repository structure" >&2
  return 1
}

# Function to offer saving the path to shell config
save_path_to_shell_config() {
  local PATH_TO_SAVE="$1"
  local CONFIG_FILE=""
  
  # Detect which shell config file to use
  if [ -n "$BASH_VERSION" ]; then
    CONFIG_FILE="$HOME/.bashrc"
  elif [ -n "$ZSH_VERSION" ]; then
    CONFIG_FILE="$HOME/.zshrc"
  else
    # Try to detect shell from process
    local SHELL_NAME="$(basename "$SHELL")"
    case "$SHELL_NAME" in
      bash) CONFIG_FILE="$HOME/.bashrc" ;;
      zsh) CONFIG_FILE="$HOME/.zshrc" ;;
      *) 
        echo "Could not determine your shell configuration file."
        echo "Please manually add the following line to your shell configuration:"
        echo "export MCP_GRAPHITI_REPO_PATH=\"$PATH_TO_SAVE\""
        return 1
        ;;
    esac
  fi
  
  # Ask user for confirmation before modifying their shell config
  echo -n "Would you like to permanently save MCP_GRAPHITI_REPO_PATH=\"$PATH_TO_SAVE\" to $CONFIG_FILE? (y/n): "
  read -r CONFIRM
  
  if [[ "$CONFIRM" =~ ^[Yy]$ ]]; then
    echo "" >> "$CONFIG_FILE"
    echo "# Added by graphiti script" >> "$CONFIG_FILE"
    echo "export MCP_GRAPHITI_REPO_PATH=\"$PATH_TO_SAVE\"" >> "$CONFIG_FILE"
    echo "Path saved to $CONFIG_FILE. Please restart your terminal or run 'source $CONFIG_FILE' to apply."
    return 0
  else
    echo "Path not saved. You'll need to set MCP_GRAPHITI_REPO_PATH manually each time."
    echo "You can do this by running: export MCP_GRAPHITI_REPO_PATH=\"$PATH_TO_SAVE\""
    return 1
  fi
}

# Function to validate and set the log level
validate_log_level() {
  local log_level=$1
  
  # Convert to lowercase for case-insensitive comparison
  log_level=$(echo "$log_level" | tr '[:upper:]' '[:lower:]')
  
  # Validate against allowed values
  case "$log_level" in
    debug|info|warn|error|fatal)
      echo "$log_level"
      return 0
      ;;
    *)
      echo -e "${RED}Error: Invalid log level '$log_level'. Valid values are: debug, info, warn, error, fatal.${NC}" >&2
      echo -e "Using default log level: info" >&2
      echo "info"
      return 1
      ;;
  esac
}

# Function to ensure dist directory is available for Docker build
#
# This function checks if the graphiti-core package is configured to use a local wheel
# If so, it ensures the dist directory exists and copies the wheel files to the mcp_server/dist directory
# This is used to ensure the graphiti-core package is built and available for use in the Docker containers
#
# If the graphiti-core package is configured to use the published package, this function will return 0 and no action will be taken
ensure_dist_for_build() {
  echo -e "${BOLD}Checking build configuration...${NC}"
  
  # Check if we're using local wheel in pyproject.toml
  if ! grep -q "graphiti-core @ file:///dist/" "$MCP_GRAPHITI_REPO_PATH/mcp_server/pyproject.toml" || \
     grep -q "^[^#]*graphiti-core>=" "$MCP_GRAPHITI_REPO_PATH/mcp_server/pyproject.toml"; then
    echo -e "${CYAN}Using published graphiti-core package. Skipping local wheel setup.${NC}"
    return 0
  fi
  
  echo -e "${CYAN}Local graphiti-core wheel configuration detected.${NC}"
  
  # Source and target paths
  local REPO_DIST="$MCP_GRAPHITI_REPO_PATH/dist"
  local SERVER_DIST="$MCP_GRAPHITI_REPO_PATH/mcp_server/dist"
  
  # Check if source dist exists
  if [ ! -d "$REPO_DIST" ]; then
    echo -e "${RED}Error: dist directory not found at $REPO_DIST${NC}"
    echo -e "Please build the graphiti-core wheel first."
    return 1
  fi
  
  # Create target directory if needed
  mkdir -p "$SERVER_DIST"
  
  # Copy wheel files
  echo -e "Copying wheel files from ${CYAN}$REPO_DIST${NC} to ${CYAN}$SERVER_DIST${NC}"
  cp -f "$REPO_DIST"/*.whl "$SERVER_DIST/"
  
  echo -e "${GREEN}Dist directory prepared for Docker build.${NC}"
  return 0
}

# Check for help flag
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
  usage
fi

# 1. Check and Determine Source Path
if [ -z "$MCP_GRAPHITI_REPO_PATH" ]; then
  echo -e "${YELLOW}MCP_GRAPHITI_REPO_PATH is not set. Attempting to auto-detect...${NC}"
  
  # Try to auto-detect the repository path based on script location
  AUTO_DETECTED_PATH=$(detect_repo_path)
  
  if [ -n "$AUTO_DETECTED_PATH" ]; then
    echo -e "Detected repository path: ${CYAN}$AUTO_DETECTED_PATH${NC}"
    export MCP_GRAPHITI_REPO_PATH="$AUTO_DETECTED_PATH"
    
    # Offer to save it permanently
    save_path_to_shell_config "$AUTO_DETECTED_PATH"
  else
    echo -e "${RED}Error: Could not auto-detect the repository path.${NC}"
    echo -e "Please set the ${CYAN}MCP_GRAPHITI_REPO_PATH${NC} environment variable manually."
    echo -e "Example: ${YELLOW}export MCP_GRAPHITI_REPO_PATH=/path/to/mcp-graphiti${NC}"
    exit 1
  fi
fi

SOURCE_SERVER_DIR="$MCP_GRAPHITI_REPO_PATH/mcp_server"
if [ ! -d "$SOURCE_SERVER_DIR" ]; then
  echo -e "${RED}Error: Source directory not found: $SOURCE_SERVER_DIR${NC}"
  echo -e "Please ensure ${CYAN}MCP_GRAPHITI_REPO_PATH${NC} is set correctly."
  exit 1
fi

# 2. Parse command and arguments
COMMAND="${1}" # No default command
shift || true # Shift arguments even if $1 was empty (no command given). Use || true to prevent exit on error if no args.

# If no command is provided, show usage
if [ -z "$COMMAND" ]; then
  echo -e "${YELLOW}No command specified.${NC}"
  usage
fi

# Handle commands using if/elif/else structure
if [[ "$COMMAND" == "init" ]]; then
  PROJECT_NAME="$1"
  TARGET_DIR="${2:-.}" # Default target directory to current if not provided

  if [ -z "$PROJECT_NAME" ]; then
    echo -e "${RED}Error: Missing PROJECT_NAME argument for init command.${NC}"
    echo -e "Usage: ${CYAN}graphiti init PROJECT_NAME [TARGET_DIRECTORY]${NC}"
    exit 1
  fi

  echo -e "Initializing Graphiti project '${CYAN}$PROJECT_NAME${NC}' in '${CYAN}$TARGET_DIR${NC}'..."

  # Create template mcp-config.yaml in the target directory
  cat > "$TARGET_DIR/mcp-config.yaml" << EOF
# Configuration for project: $PROJECT_NAME
services:
  - id: ${PROJECT_NAME}-main # Service ID (used for default naming)
    # container_name: "custom-name" # Optional: Specify custom container name
    # port_default: 8001           # Optional: Specify custom host port
    group_id: "$PROJECT_NAME"     # Graph group ID
    entity_dir: "entities"       # Relative path to entity definitions within project
    # environment:                 # Optional: Add non-secret env vars here
    #   MY_FLAG: "true"
EOF
  echo -e "Created template ${CYAN}$TARGET_DIR/mcp-config.yaml${NC}"

  # Create entities directory
  mkdir -p "$TARGET_DIR/entities"
  touch "$TARGET_DIR/entities/.gitkeep"
  echo -e "Created entities directory: ${CYAN}$TARGET_DIR/entities${NC}"

  # Set up rules
  _setup_rules "$PROJECT_NAME" "$TARGET_DIR"

  # Update central registry
  # Get absolute paths
  ABS_TARGET_DIR=$(cd "$TARGET_DIR" && pwd)
  ABS_CONFIG_PATH="$ABS_TARGET_DIR/mcp-config.yaml"
  CENTRAL_REGISTRY_PATH="$SOURCE_SERVER_DIR/mcp-projects.yaml"
  
  echo -e "Updating central project registry: ${CYAN}$CENTRAL_REGISTRY_PATH${NC}"
  "$SOURCE_SERVER_DIR/scripts/_yaml_helper.py" update-registry \
    --registry-file "$CENTRAL_REGISTRY_PATH" \
    --project-name "$PROJECT_NAME" \
    --root-dir "$ABS_TARGET_DIR" \
    --config-file "$ABS_CONFIG_PATH"
  
  # Check exit code from the Python script
  if [ $? -ne 0 ]; then
    echo -e "${RED}Error: Failed to update project registry.${NC}"
    exit 1
  fi

  echo -e "${GREEN}Graphiti project '$PROJECT_NAME' initialization complete.${NC}"
  exit 0

elif [[ "$COMMAND" == "up" ]]; then
  # Parse flags
  DETACHED=""
  LOG_LEVEL_OVERRIDE=""
  
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -d)
        DETACHED="-d"
        shift
        ;;
      --log-level)
        if [[ -z "$2" || "$2" == -* ]]; then
          echo -e "${RED}Error: --log-level requires a value${NC}"
          exit 1
        fi
        LOG_LEVEL_OVERRIDE=$(validate_log_level "$2")
        shift 2
        ;;
      *)
        echo -e "${RED}Error: Unknown option: $1${NC}"
        usage
        ;;
    esac
  done

  # We need to run docker-compose from the mcp_server directory
  MCP_SERVER_DIR="$MCP_GRAPHITI_REPO_PATH/mcp_server"
  
  if [ ! -d "$MCP_SERVER_DIR" ]; then
    echo -e "${RED}Error: mcp_server directory not found at $MCP_SERVER_DIR${NC}"
    exit 1
  fi

  # Save current directory to return to it afterwards
  CURRENT_DIR=$(pwd)
  
  echo -e "${BOLD}Starting Graphiti containers with docker compose...${NC}"
  echo -e "This will rebuild containers to incorporate any changes."
  echo -e "Running Docker Compose from: ${CYAN}$MCP_SERVER_DIR${NC}"
  
  # Change to mcp_server directory where docker-compose.yml is located
  cd "$MCP_SERVER_DIR"
  
  # Create environment variable exports for Docker Compose
  if [ -n "$LOG_LEVEL_OVERRIDE" ]; then
    echo -e "Setting log level to: ${CYAN}$LOG_LEVEL_OVERRIDE${NC}"
    export GRAPHITI_LOG_LEVEL="$LOG_LEVEL_OVERRIDE"
  fi
  
  # Ensure docker-compose.yml is generated before continuing
  _ensure_docker_compose_file || exit 1
  
  # Ensure dist directory is ready for build
  ensure_dist_for_build || exit 1
  
  # Run docker compose up with build and force-recreate flags
  if [ -n "$DETACHED" ]; then
    echo -e "${YELLOW}Running in detached mode.${NC}"
    docker compose up --build --force-recreate -d
  else
    docker compose up --build --force-recreate
  fi
  
  # Return to original directory
  cd "$CURRENT_DIR"
  
  echo -e "${GREEN}Docker compose up completed.${NC}"
  exit 0

elif [[ "$COMMAND" == "down" ]]; then
  # Parse flags
  LOG_LEVEL_OVERRIDE=""
  
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --log-level)
        if [[ -z "$2" || "$2" == -* ]]; then
          echo -e "${RED}Error: --log-level requires a value${NC}"
          exit 1
        fi
        LOG_LEVEL_OVERRIDE=$(validate_log_level "$2")
        shift 2
        ;;
      *)
        echo -e "${RED}Error: Unknown option: $1${NC}"
        usage
        ;;
    esac
  done
  
  # We need to run docker-compose from the mcp_server directory
  MCP_SERVER_DIR="$MCP_GRAPHITI_REPO_PATH/mcp_server"
  
  if [ ! -d "$MCP_SERVER_DIR" ]; then
    echo -e "${RED}Error: mcp_server directory not found at $MCP_SERVER_DIR${NC}"
    exit 1
  fi

  # Save current directory to return to it afterwards
  CURRENT_DIR=$(pwd)
  
  echo -e "${BOLD}Stopping and removing Graphiti containers...${NC}"
  echo -e "Running Docker Compose from: ${CYAN}$MCP_SERVER_DIR${NC}"
  
  # Change to mcp_server directory where docker-compose.yml is located
  cd "$MCP_SERVER_DIR"
  
  # Set environment variables for Docker Compose
  if [ -n "$LOG_LEVEL_OVERRIDE" ]; then
    echo -e "Setting log level to: ${CYAN}$LOG_LEVEL_OVERRIDE${NC}"
    export GRAPHITI_LOG_LEVEL="$LOG_LEVEL_OVERRIDE"
  fi
  
  # Run docker compose down to stop and remove containers
  docker compose down
  
  # Return to original directory
  cd "$CURRENT_DIR"
  
  echo -e "${GREEN}Docker compose down completed.${NC}"
  exit 0

elif [[ "$COMMAND" == "restart" ]]; then
  # Parse flags
  DETACHED=""
  LOG_LEVEL_OVERRIDE=""
  
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -d)
        DETACHED="-d"
        shift
        ;;
      --log-level)
        if [[ -z "$2" || "$2" == -* ]]; then
          echo -e "${RED}Error: --log-level requires a value${NC}"
          exit 1
        fi
        LOG_LEVEL_OVERRIDE=$(validate_log_level "$2")
        shift 2
        ;;
      *)
        echo -e "${RED}Error: Unknown option: $1${NC}"
        usage
        ;;
    esac
  done
  
  # We need to run docker-compose from the mcp_server directory
  MCP_SERVER_DIR="$MCP_GRAPHITI_REPO_PATH/mcp_server"
  
  if [ ! -d "$MCP_SERVER_DIR" ]; then
    echo -e "${RED}Error: mcp_server directory not found at $MCP_SERVER_DIR${NC}"
    exit 1
  fi

  # Save current directory to return to it afterwards
  CURRENT_DIR=$(pwd)
  
  echo -e "${BOLD}Restarting Graphiti containers: first down, then up...${NC}"
  echo -e "Running Docker Compose from: ${CYAN}$MCP_SERVER_DIR${NC}"
  
  # Set environment variables for Docker Compose
  if [ -n "$LOG_LEVEL_OVERRIDE" ]; then
    echo -e "Setting log level to: ${CYAN}$LOG_LEVEL_OVERRIDE${NC}"
    export GRAPHITI_LOG_LEVEL="$LOG_LEVEL_OVERRIDE"
  fi
  
  # Change to mcp_server directory where docker-compose.yml is located
  cd "$MCP_SERVER_DIR"
  
  # First run docker compose down
  echo -e "${CYAN}Stopping containers...${NC}"
  docker compose down
  
  # Ensure docker-compose.yml is generated before continuing
  _ensure_docker_compose_file || exit 1
  
  # Ensure dist directory is ready for build
  ensure_dist_for_build || exit 1
  
  # Then run docker compose up
  echo -e "${CYAN}Starting containers...${NC}"
  if [ -n "$DETACHED" ]; then
    echo -e "${YELLOW}Running in detached mode.${NC}"
    docker compose up --build --force-recreate -d
  else
    docker compose up --build --force-recreate
  fi
  
  # Return to original directory
  cd "$CURRENT_DIR"
  
  echo -e "${GREEN}Restart sequence completed.${NC}"
  exit 0

elif [[ "$COMMAND" == "entity" ]]; then
  # Get SET_NAME from first remaining argument
  SET_NAME="$1"
  
  # Input validation
  if [ -z "$SET_NAME" ]; then
    echo -e "${RED}Error: Missing SET_NAME argument.${NC}"
    echo -e "Usage: ${CYAN}graphiti entity SET_NAME${NC}"
    exit 1
  fi
  
  # Validate SET_NAME format (only allow letters, numbers, underscores, hyphens)
  if ! [[ "$SET_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    echo -e "${RED}Error: Invalid SET_NAME. Use only letters, numbers, underscores, and hyphens.${NC}"
    exit 1
  fi
  
  # Path construction
  ENTITY_TYPES_DIR="$SOURCE_SERVER_DIR/entity_types"
  NEW_SET_DIR="$ENTITY_TYPES_DIR/$SET_NAME"
  
  # Check if directory already exists
  if [ -d "$NEW_SET_DIR" ]; then
    echo "Error: Entity type set '$SET_NAME' already exists at: $NEW_SET_DIR"
    exit 1
  fi
  
  # Create the new directory
  mkdir -p "$NEW_SET_DIR"
  echo "Created entity type set directory: $NEW_SET_DIR"
  
  # Generate class name from SET_NAME
  CLASS_NAME=$(set_name_to_class_name "$SET_NAME")
  
  # Create entity file using the custom_entity_example.py as a template
  ENTITY_FILE="$NEW_SET_DIR/entity.py"
  TEMPLATE_FILE="$SOURCE_SERVER_DIR/entity_types/example/custom_entity_example.py"
  
  # Check if template file exists
  if [ ! -f "$TEMPLATE_FILE" ]; then
    echo "Warning: Template file not found: $TEMPLATE_FILE"
    echo "Creating a minimal entity file instead."
    
    # Create a minimal entity file
    cat > "$ENTITY_FILE" << EOF
from pydantic import BaseModel, Field


class $CLASS_NAME(BaseModel):
    """Example entity for the '$SET_NAME' set."""
    
    example_field: str = Field(
        ...,
        description='An example field.',
    )
EOF
  else
    # Read the template and replace the class name
    sed -e "s/class Product/class $CLASS_NAME/" \
        -e "s/A Product/$CLASS_NAME/" \
        -e "s/products/${SET_NAME}s/" \
        -e "s/the product/the ${SET_NAME}/" \
        "$TEMPLATE_FILE" > "$ENTITY_FILE"
    
    echo "Created entity file using template: $ENTITY_FILE"
  fi
  
  echo "Entity set '$SET_NAME' successfully created."
  exit 0

elif [[ "$COMMAND" == "rules" ]]; then
  PROJECT_NAME="$1"
  TARGET_DIR="${2:-.}" # Default target directory to current if not provided

  if [ -z "$PROJECT_NAME" ]; then
    echo "Error: Missing PROJECT_NAME argument for rules command."
    echo "Usage: graphiti rules PROJECT_NAME [TARGET_DIRECTORY]"
    exit 1
  fi

  # Call the helper function (validation is inside the helper)
  _setup_rules "$PROJECT_NAME" "$TARGET_DIR"
  exit 0

elif [[ "$COMMAND" == "compose" ]]; then
  # We need to run generate_compose.py from the mcp_server directory
  MCP_SERVER_DIR="$MCP_GRAPHITI_REPO_PATH/mcp_server"
  
  if [ ! -d "$MCP_SERVER_DIR" ]; then
    echo -e "${RED}Error: mcp_server directory not found at $MCP_SERVER_DIR${NC}"
    exit 1
  fi

  # Save current directory to return to it afterwards
  CURRENT_DIR=$(pwd)
  
  echo -e "${BOLD}Generating docker-compose.yml from templates...${NC}"
  echo -e "Running from: ${CYAN}$MCP_SERVER_DIR${NC}"
  
  # Change to mcp_server directory where the script is located
  cd "$MCP_SERVER_DIR"
  
  # Run the generation script
  "./generate_compose.py"
  RESULT=$?
  
  # Check the result and provide appropriate feedback
  if [ $RESULT -eq 0 ]; then
    echo -e "${GREEN}Successfully generated docker-compose.yml file.${NC}"
  else
    echo -e "${RED}Error: Failed to generate docker-compose.yml file.${NC}"
  fi
  
  # Return to original directory
  cd "$CURRENT_DIR"
  
  exit $RESULT

else
  echo -e "${RED}Error: Unknown command '$COMMAND'${NC}"
  usage
fi 